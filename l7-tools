#!/usr/bin/env bash

TITLE="LangitKetujuh Tools"
NAME=$(basename "$0")
LICENSE="GPL-3.0-or-later"
TMP="/tmp"
ANYKEY=$(echo -e 'Press any key to quit')
VERSION="1.18.56"

ARCH=$(uname -m)

usage()
{
    echo -e "\n\033[1;33m$TITLE $VERSION\033[0m"
    echo -e "\e[3mConfiguring tool for upgrade, chroot and grub installer.\e[0m"
    echo
    cat <<- EOF
license : $LICENSE
usage   : $NAME [option]
option  :
          --chroot      -c    enter chroot mode
          --downgrade   -d    downgrade & uninstall program
          --grub        -g    install grub
          --patch       -p    reinstall patch
          --remote      -r    terminal remote
          --upgrade     -u    upgrade system
          --user        -m    create new user
          --help        -h    show this help
          --version     -v    show $NAME version

EOF
}
# Detect if this is an EFI system.
if [ -e /sys/firmware/efi/systab ]; then
    EFI_SYSTEM=1
    EFI_FW_BITS=$(cat /sys/firmware/efi/fw_platform_size)
    if [ $EFI_FW_BITS -eq 32 ]; then
        EFI_TARGET=i386-efi
    else
        EFI_TARGET=x86_64-efi
    fi
fi

check_root(){
    if [ $(id -u) -ne 0 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Please run as root!"
        exit 0
    fi
}

check_packages() {
    # P01 ardour
    if [[ -n $(xbps-query -p state ardour) && -z $(xbps-query -p state l7-ardour) ]]; then
        P01="l7-ardour"
    fi
    # P02 base-files
    if [[ -n $(xbps-query -p state base-files) && -z $(xbps-query -p state l7-base-files) ]]; then
        if [ -z "$(lsb_release -c | grep -E "langitketujuh")" ] ; then
            P02="l7-base-files"
        fi
    fi
    # P03 l7-runit-void
    if [[ -n $(xbps-query -p state runit-void) && -z $(xbps-query -p state l7-runit-void) ]]; then
        if [ -z "$(grep -oE 'NAME="LangitKetujuh OS"' /etc/os-release)" ] ; then
            P03="l7-runit-void"
        fi
    fi
    # P04 l7-shadow
    if [[ -n $(xbps-query -p state shadow) && -z $(xbps-query -p state l7-shadow) ]]; then
        if [ -z "$(grep -oE 'fish' /etc/default/useradd)" ] ; then
            P04="l7-shadow"
        fi
    fi
    # P05 runit-backlight
    if [[ -z $(xbps-query -p state runit-backlight) && ! -h /var/service/backlight/run ]] ; then
        P05="runit-backlight"
    fi
    # if use kde plasma
    if  [[ -n $(xbps-query -p state plasma-desktop) && $(echo $?) -eq 0 ]]; then
        # P90 l7-plasma-desktop
        if [ -z "$(grep -E "system.upgrade" /usr/share/plasma/plasmoids/org.kde.plasma.kicker/contents/config/main.xml)" ] ; then
        P90="l7-plasma-desktop"
        fi
        # P91 breeze-icons
        if [[ -n $(xbps-query -p state breeze) && -z "$(grep -oE "#292c2f" /usr/share/icons/breeze/apps/64/distributor-logo-langitketujuh.svg)" ]]; then
            P91="l7-breeze l7-breeze-icons l7-breeze-gtk"
        fi
        # P92 l7-plasma-framework
        if [[ -n $(xbps-query -p state plasma-framework) && -z "$(grep -E "defaultWallpaperTheme=LangitKetujuh" /usr/share/plasma/desktoptheme/default/metadata.desktop)" ]] ; then
            P92="l7-plasma-framework"
        fi
        # P93 l7-kservice
        if [[ -n $(xbps-query -p state kservice) && -z "$(grep -oE 'LangitKetujuh' /etc/xdg/menus/applications.menu)" ]] ; then
            P94="l7-kservice"
        fi
    fi
    # check packages
    if [ $(echo -n "$P01 $P02 $P03 $P04 $P05 $P90 $P91 $P92 $P93 $P94" | sed 's/ //g' | wc -c) -ne 0 ]; then
        echo -e "\033[1;36m[*]\033[0m Reinstall patch"
        xbps-install -fIy $P01 $P02 $P03 $P04 $P05 $P90 $P91 $P92 $P93 $P94
    fi
}

check_qtwebengine_dark_mode() {
    # if commented
    if [ -f /etc/environment ] && grep -E "force-dark-mode" /etc/environment | grep '#' >/dev/null 2>&1; then
        echo -e "\033[1;36m[*]\033[0m Enable Qtwebengine dark mode"
        sed -i 's/#QTWEBENGINE_CHROMIUM_FLAGS=--force-dark-mode/QTWEBENGINE_CHROMIUM_FLAGS=--force-dark-mode/' /etc/environment >/dev/null 2>&1
    else
        # if not available
        if [ -z "$(grep -E "force-dark-mode" /etc/environment)" ] ; then
            echo -e "\033[1;36m[*]\033[0m Enable Qtwebengine dark mode"
            echo "QTWEBENGINE_CHROMIUM_FLAGS=--force-dark-mode" >> /etc/environment
        fi
    fi
}

disable_openntpd() {
    for time in ntpd openntpd ; do
        if [ -h /var/service/${time} ]; then
            rm -v /var/service/${time} >/dev/null 2>&1
            echo -e "\033[1;36m[*]\033[0m Removed service: ${time}"
        fi
    done
}

enable_openntpd() {
    if ! [ -d /var/service/openntpd ]; then
        echo -e "\033[1;36m[*]\033[0m Enable service: openntpd"
        ln -s /etc/sv/openntpd /var/service/ >/dev/null 2>&1
    fi
}

localtime_to_utc() {
    if [[ -f /etc/rc.conf && -n $(grep -E 'HARDWARECLOCK="localtime"' /etc/rc.conf) ]]; then
        echo -e "\033[1;36m[*]\033[0m Enable UTC for single boot"
        sed -i 's|HARDWARECLOCK="localtime"|#HARDWARECLOCK="UTC"|' /etc/rc.conf
        echo -e "[*] HARDWARECLOCK=UTC"
    fi
}

utc_to_localtime() {
    if [[ -f /etc/rc.conf && -n $(grep -E '#HARDWARECLOCK="UTC"' /etc/rc.conf) ]]; then
        echo -e "\033[1;36m[*]\033[0m Enable localtime for Windows dualboot"
        sed -i 's|#HARDWARECLOCK="UTC"|HARDWARECLOCK="localtime"|' /etc/rc.conf
        echo -e "[*] HARDWARECLOCK=localtime"
    fi
}

check_hardware_clock() {
    if  [[ -z $(xbps-query -p state openntpd) && $(echo $?) -eq 2 ]]; then
        echo -e "\033[1;36m[*]\033[0m Install openntpd service"
        xbps-install -y openntpd
        xbps-remove -y ntp
    fi
    if [ -n "$EFI_SYSTEM" ]; then
        if [ -d /boot/efi/EFI/Microsoft ]; then # if uefi dual boot, then UTC to localtime
            utc_to_localtime
            disable_openntpd
        else # if uefi single boot, then localtime to UTC
            localtime_to_utc
            enable_openntpd
        fi
    else # if legacy, then localtime to UTC
        localtime_to_utc
        enable_openntpd
    fi
}

check_welcome_runit() {
    if [ -z "$(grep -E "LangitKetujuh" /etc/runit/1)" ] ; then
        echo -e "\033[1;36m[*]\033[0m Enable welcome to LangitKetujuh"
        sed -i 's/Void/LangitKetujuh/g' /etc/runit/1
    fi
}

check_welcome_grub() {
    if [[ -f /etc/default/grub  && -z $(grep -E "LangitKetujuh" /etc/default/grub) ]] ; then
        echo -e "\033[1;36m[*]\033[0m Enable LangitKetujuh grub name"
        sed -i /etc/default/grub -res'#^(GRUB_DISTRIBUTOR).*#GRUB_DISTRIBUTOR="LangitKetujuh"#'
        update-grub
    fi
}

prober_update_grub() {
    os-prober
    update-grub
}

os_prober_false() {
    echo -e "\033[1;36m[*]\033[0m Disable grub os-prober"
    echo -e "[*] Detect efi:" $(ls /boot/efi/EFI/ | xargs)
    echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
}

check_os_prober() {
    if [ -n "$EFI_SYSTEM" ]; then # if uefi
        if [[ -d /boot/efi/EFI/LangitKetujuh && -d /boot/efi/EFI/Microsoft ]]; then  # if uefi dualboot with windows
            if [[ -f /etc/default/grub && -n $(grep -E "GRUB_DISABLE_OS_PROBER=false" /etc/default/grub | grep '#') ]] ; then
                sed -i -e "/GRUB_DISABLE_OS_PROBER=false/d" /etc/default/grub
                os_prober_false
                prober_update_grub
            else # if uefi dual boot with other efi
                if [ -z $(grep -E "GRUB_DISABLE_OS_PROBER=false" /etc/default/grub) ] ; then
                    os_prober_false
                    prober_update_grub
                fi
            fi
        else # if uefi singleboot
            if [[ -f /etc/default/grub  && -n $(grep -E "GRUB_DISABLE_OS_PROBER=false" /etc/default/grub) ]] ; then
                os_prober_false
            fi
        fi
    else # for legacy singleboot or more
        if [[ -f /etc/default/grub && -z $(grep -E "GRUB_DISABLE_OS_PROBER=false" /etc/default/grub) ]]; then
            os_prober_false
            prober_update_grub
        fi
    fi
}

check_all() {
    check_packages
    check_hardware_clock
    check_os_prober
    check_qtwebengine_dark_mode
    check_welcome_runit
    check_welcome_grub
}

quit() {
    read -n 1 -s -r -p "$ANYKEY"
    exit 0
}

for arg in "$@"; do
    case $arg in
        --upgrade|-u)
            check_root
            echo -e "\033[1;36m[1]\033[0m Synchronization"
            xbps-install -S
            echo -e "\033[1;36m[2]\033[0m Full system upgrade"
            xbps-install -Iu
            if ! [ $(echo $?) = "0" ]; then
                # if new xbps available
                xbps-install xbps
                xbps-install -SIu
            fi
            echo -e "\033[1;36m[3]\033[0m Check trouble and patch"
            check_all
            echo -e "\033[1;36m[4]\033[0m \033[1;33m(Optional)\033[0m Remove all old kernels?"
            read -e -p "[*] Do you want to continue? [y/N]: " KERNEL
            if [[ $KERNEL =~ ^[Yy]$ ]]; then
                echo -e "[*] Yes, wait a minutes"
                vkpurge rm all
            fi
            echo -e "\033[1;36m[5]\033[0m \033[1;33m(Optional)\033[0m Remove obsolete and orphans packages?"
            read -e -p "[*] Do you want to continue? [y/N]: " CACHE
            if [[ $CACHE =~ ^[Yy]$ ]]; then
                echo -e "[*] Yes, wait a minutes"
                xbps-remove -vOoy
            fi
            quit
        ;;
        --remote|-r)
            if [ -z $(find ~/.ssh/ -name "*.pub" -type f) ]; then
                echo -e "[*] Create new ssh key"
                ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 >/dev/null 2>&1;
                echo
            fi
            echo -e "\033[1;36m[*]\033[0m Remote connecting"
            upterm host
            echo -e "\033[1;36m[*]\033[0m Remote exit!"
        ;;
        --chroot|-c)
            check_root
            lsblk -o name,fstype,fsavail,fsused,fsuse%,size,mountpoint
            echo
            read -e -p "[*] Root partition (ex: sda2): " root_part
            mount /dev/$root_part /mnt/
            read -e -p "[*] Boot mode uefi (y/n): " boot_opt
            if [[ $boot_opt =~ ^[Yy]$ ]]; then
                # for separate efi partition (uefi)
                read -e -p "[*] Boot efi partition (ex: sda1): " boot_part
                boot_target="boot/efi"
                mkdir -p /mnt/$boot_target
                mount /dev/$boot_part /mnt/$boot_target
            else
                # for separate bios partition (legacy)
                read -e -p "[*] Separate boot bios partition (y/n): " boot_separate
                if [[ $boot_separate =~ ^[Yy]$ ]]; then
                    read -e -p "[*] Boot bios partition (ex: sda1): " boot_part
                    boot_target="boot"
                    mkdir -p /mnt/$boot_target
                    mount /dev/$boot_part /mnt/$boot_target
                fi
            fi
            # mount sys, dev, proc, run
            for dir in dev proc sys run;
            do mkdir -p /mnt/$dir ;
                mount --rbind /$dir /mnt/$dir ;
                mount --make-rslave /mnt/$dir ;
            done
            # enable network
            cp /etc/resolv.conf /mnt/etc/
            # chroot mode
            echo
            chroot /mnt/ /bin/fish
            umount -R /mnt >/dev/null 2>&1
            echo -e "\033[1;36m[*]\033[0m Chroot exit"
        ;;
        --grub|-g)
            check_root
            lsblk -o name,fstype,fsavail,fsused,fsuse%,size,mountpoint
            echo
            read -e -p "[*] Boot mode UEFI (y/n): " boot_opt
            if [[ $boot_opt =~ ^[Yy]$ ]]; then
                read -e -p "[*] Continue install grub (Y/n): " continue
                if [[ $continue =~ ^[Yy]$ ]]; then
                    echo
                    grub-install --target=$EFI_TARGET \
                    --efi-directory=/boot/efi --bootloader-id="LangitKetujuh" --recheck
                    check_os_prober
                else
                    exit 0
                fi
            else
                read -e -p "[*] Bootloader (ex: sda): " boot_loader
                read -e -p "[*] Continue install grub (Y/n): " continue
                if [[ $continue =~ ^[Yy]$ ]]; then
                    echo
                    grub-install /dev/$boot_loader
                    check_os_prober
                else
                    exit 0
                fi
            fi
        ;;
        --user|-m)
            check_root
            read -e -p "[*] User name: " user_name
            read -e -p "[*] Full name: " full_name
            read -e -p "[*] As Administrator (Y/n): " admin_user
            if [[ $admin_user =~ ^[Yy]$ ]]; then
                user_group="_pipewire,audio,bluetooth,cdrom,colord,floppy,kvm,lpadmin,optical,video,wheel,xbuilder"
            else
                user_group="_pipewire,audio,bluetooth,cdrom,colord,floppy,kvm,lpadmin,optical,video,xbuilder"
            fi
            echo -e "\033[1;36m[*]\033[0m Create user: \033[1;36m$user_name ($full_name)\033[0m"
            read -e -p "[*] Continue create user (Y/n): " continue
            if [[ $continue =~ ^[Yy]$ ]]; then
                useradd $user_name -c "$full_name"
                echo -e "\033[1;36m[*]\033[0m Create new user password"
                passwd $user_name
                usermod -a $user_name -G $user_group
                echo -e "\033[1;36m[*]\033[0m User $user_name created successfully"
            else
                exit 0
            fi
        ;;
        --patch|-p)
            check_all
        ;;
        --downgrade|-d)
            check_root
            echo -e "\033[1;36m[1] Display Callibrator\033[0m"
            xbps-remove -R dispcalGUI
            echo -e "\033[1;36m[2] Add-ons 2D Software\033[0m"
            xbps-remove -R gmic gmic-gimp gimp-lqr-plugin xsane-gimp resynthesizer l7-krita
            echo -e "\033[1;36m[3] Photography Software\033[0m"
            xbps-remove -R digikam rawtherapee hugin Converseen
            echo -e "\033[1;36m[4] Non-linear Editor\033[0m"
            xbps-remove -R kdenlive handbrake mkvtoolnix-gui
            echo -e "\033[1;36m[5] Font Maker\033[0m"
            xbps-remove -R fontforge
            echo -e "\033[1;36m[6] Digital Painting\033[0m"
            xbps-remove -R krita l7-krita gmic-krita
            echo -e "\033[1;36m[7] Recorder & Broadcaster Software\033[0m"
            xbps-remove -R obs l7-obs
            echo -e "\033[1;36m[8] Layout & Desktop Publishing\033[0m"
            xbps-remove -R scribus l7-scribus
            echo -e "\033[1;36m[9] 2D/3D Animation Full Feature\033[0m"
            xbps-remove -R blender l7-blender synfigstudio opentoonz
            echo -e "\033[1;36m[10] Audio Production\033[0m"
            xbps-remove -R audacity l7-audacity ardour l7-ardour kid3 \
            soundkonverter lmms freepats cmt alsa-plugins-jack zita-ajbridge \
            zita-alsa-pcmi zita-at1 zita-njbridge zita-resampler \
            alsa-plugins-samplerate calf fftw rubberband librubberband \
            ladspa-bs2b speex mda-lv2 soundfont-fluid
            echo -e "\033[1;36m[11] Extra Google Fonts\033[0m"
            xbps-remove -R google-fonts-ttf
            echo -e "\033[1;36m[12] Game Engine Creator Mutiplatform\033[0m"
            xbps-remove -R godot l7-godot
            echo -e "\033[1;36m[13] CAD Sofware\033[0m"
            xbps-remove -R freecad LibreCAD
            echo -e "\033[1;36m[14] Program Compiler\033[0m"
            xbps-remove -R automake bison fakeroot flex gdb libtool m4 patch \
            pkg-config qemu-user-static scons yasm gcc-objc++ llvm clang icu cmake
        ;;
        --help|-h)
            usage
            exit 0
        ;;
        --version|-v)
            echo -e "\033[1;33m $NAME\033[0m version $VERSION"
            exit 0
        ;;
        *)
            usage
            exit 0
    esac
done
