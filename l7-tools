#!/usr/bin/env bash

TITLE="LangitKetujuh Tools"
NAME=$(basename "$0")
LICENSE="GPL-3.0-or-later"
TMP="/tmp"
ANYKEY=$(echo -e 'Press any key to quit')
VERSION="1.18.14"

ARCH=$(uname -m)

usage()
{
    echo -e "\n\033[1;33m$TITLE $VERSION\033[0m"
    echo -e "\e[3mConfiguring tool for update, chroot and grub installer.\e[0m"
    echo
    cat <<- EOF
license : $LICENSE
usage   : $NAME [option]
option  :
          --chroot      -c    enter chroot mode
          --downgrade   -d    downgrade & uninstall program
          --grub        -g    install grub
          --patch       -p    reinstall patch
          --remote      -r    terminal remote
          --update      -u    update system
          --user        -m    create new user
          --help        -h    show this help
          --version     -v    show $NAME version

EOF
}

check_root(){
    if [ $(id -u) -ne 0 ]; then
        echo -e "\033[1;91m[FAILED]\033[0m Please run as root!"
        exit
    fi
}

check_screen_tearing_intel(){
    if cat /usr/share/xbps.d/xbps.conf | grep xf86-video-intel >/dev/null 2>&1; then
        echo >/dev/null 2>&1
    else
        echo -e "\033[1;36m[*]\033[0m Remove Intel screen tearing"
        echo "ignorepkg=xf86-video-intel" >> /usr/share/xbps.d/xbps.conf
        xbps-install -S
        xbps-remove -Ry xf86-video-intel
    fi
}

prober-update-grub() {
    os-prober
    update-grub
}

check_enable_os_prober() {
    if [ $(find /boot/efi/ -name "EFI" -type d >/dev/null 2>&1 | grep EFI | wc -l) -eq 1 ]; then
        # if uefi singleboot
        if [ $(ls /boot/efi/EFI/ | wc -l) -eq 1 ]; then
            if cat /etc/default/grub | grep "GRUB_DISABLE_OS_PROBER=false" | grep '#' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                if cat /etc/default/grub | grep "GRUB_DISABLE_OS_PROBER=false" >/dev/null 2>&1; then
                    echo -e "\033[1;36m[*]\033[0m Disable GRUB os-prober"
                    sed -i 's/GRUB_DISABLE_OS_PROBER=false/#GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub >/dev/null 2>&1
                    prober-update-grub
                else
                    echo -e "\033[1;36m[*]\033[0m Disable GRUB os-prober"
                    echo "#GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
                    prober-update-grub
                fi
            fi
        else # if uefi dualboot or more
            if cat /etc/default/grub | grep "GRUB_DISABLE_OS_PROBER=false" | grep '#' >/dev/null 2>&1; then
                echo -e "\033[1;36m[*]\033[0m Enable GRUB os-prober"
                echo -e "\033[1;36m[*] Detect Other EFI:\033[0m" $(ls /boot/efi/EFI/ | xargs)
                sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub >/dev/null 2>&1
                prober-update-grub
            else
                if cat /etc/default/grub | grep "GRUB_DISABLE_OS_PROBER=false" >/dev/null 2>&1; then
                    echo >/dev/null 2>&1
                else
                    echo -e "\033[1;36m[*]\033[0m Enable GRUB os-prober"
                    echo -e "\033[1;36m[*] Detect Other EFI:\033[0m" $(ls /boot/efi/EFI/ | xargs)
                    echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
                    prober-update-grub
                fi
            fi
        fi
    else
        # for legacy singleboot or more
        if cat /etc/default/grub | grep "GRUB_DISABLE_OS_PROBER=false" >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            echo -e "\033[1;36m[*]\033[0m Enable GRUB os-prober"
            echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
            prober-update-grub
        fi
    fi
}

check_enable_rtc_windows() {
    if find /boot/ -name "Microsoft" -type d >/dev/null 2>&1; then
        echo >/dev/null 2>&1
    else
        if cat /etc/rc.conf | grep '#HARDWARECLOCK="UTC"' >/dev/null 2>&1; then
            echo -e "\033[1;36m[*]\033[0m Enable localtime for Windows dualboot"
            sed -i 's/#HARDWARECLOCK="UTC"/HARDWARECLOCK="localtime"/' /etc/rc.conf
            echo -e "[*] HARDWARECLOCK=localtime"
            if find /var/service/ -name "ntpd" -type d >/dev/null 2>&1; then
                echo -e "\033[1;36m[*]\033[0m Disable automatic syncron clock service"
                for f in ntpd openntpd ; do
                    rm -v /var/service/${f} >/dev/null 2>&1
                    echo -e "[*] removed '/var/service/${f}'"
                done
            fi
        fi
    fi
}

check_version() {
    if xbps-query -p pkgver l7-base-files | grep l7-base-files-0.142 >/dev/null 2>&1; then
        echo -e "\033[1;36m[*]\033[0m Remove temporary cache"
        rm -v /var/cache/xbps/l7-*
        echo -e "\033[1;36m[*]\033[0m Reinstall Packages version"
        # downgrade if available packages
        l7_packages=$(xbps-query -l | awk '{ print $2 }' | xargs -n1 xbps-uhelper getpkgname | grep l7 | xargs)
        xbps-install -f -y $l7_packages
    else
        echo >/dev/null 2>&1
    fi
}

check_patch() {
    # P01 ardour
    if xbps-query ardour | grep 'state: installed' >/dev/null 2>&1; then
        if cat /usr/share/ardour6/themes/dark-ardour.colors | grep -oE '31363bff' >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            P01="l7-ardour"
        fi
    fi
    # P02 base-files
    if xbps-query base-files | grep 'state: installed' >/dev/null 2>&1; then
        if cat /usr/bin/lsb_release | grep -oE 'codename="langitketujuh"' >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            P02="l7-base-files"
        fi
    fi
    # P03 l7-runit-void
    if xbps-query runit-void | grep 'state: installed' >/dev/null 2>&1; then
        if cat /etc/os-release | grep -oE 'NAME="LangitKetujuh OS"' >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            P03="l7-runit-void"
        fi
    fi
    # P04 l7-shadow
    if xbps-query shadow | grep 'state: installed' >/dev/null 2>&1; then
        if cat /etc/default/useradd | grep -oE 'fish' >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            P04="l7-shadow"
        fi
    fi
    # P05 runit-backlight
    if xbps-query runit | grep 'state: installed' >/dev/null 2>&1; then
        if sv status backlight | grep run >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            P05="runit-backlight"
        fi
    fi
    
    # if use kde plasma
    if xbps-query plasma-desktop | grep 'state: installed' >/dev/null 2>&1; then
        echo >/dev/null 2>&1
        # P90 breeze-icons
        if xbps-query breeze-icons | grep 'state: installed' >/dev/null 2>&1; then
            if cat /usr/share/icons/breeze/places/64/start-here-kde.svg | grep -oE '#60a5fa' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                P90="l7-breeze-icons"
            fi
        fi
        # P91 l7-plasma-desktop
        if xbps-query plasma-desktop | grep 'state: installed' >/dev/null 2>&1; then
            if cat /usr/share/plasma/plasmoids/org.kde.plasma.kicker/contents/config/main.xml \
            | grep -oE 'system.update.langitketujuh.desktop' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                P91="l7-plasma-desktop"
            fi
        fi
        # P92 l7-plasma-framework
        if xbps-query plasma-framework | grep 'state: installed' >/dev/null 2>&1; then
            if cat /usr/share/plasma/desktoptheme/default/metadata.desktop \
            | grep -oE 'defaultWallpaperTheme=LangitKetujuh' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                P92="l7-plasma-framework"
            fi
        fi
        # P93 l7-sddm
        if xbps-query sddm | grep 'state: installed' >/dev/null 2>&1; then
            if cat /etc/sddm.conf.d/kde_settings.conf | grep -oE 'Current=langitketujuh' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                P93="l7-sddm"
            fi
        fi
        # P94 l7-kservice
        if xbps-query kservice | grep 'state: installed' >/dev/null 2>&1; then
            if cat /etc/xdg/menus/applications.menu | grep -oE 'LangitKetujuh' >/dev/null 2>&1; then
                echo >/dev/null 2>&1
            else
                P94="l7-kservice"
            fi
        fi
    else
        echo >/dev/null 2>&1
    fi
}

reinstall_patch() {
    # check packages
    if [ $(echo -n "$P01 $P02 $P03 $P04 $P05 $P90 $P91 $P92 $P93 $P94" | sed 's/ //g' | wc -c) -eq 0 ]; then
        echo >/dev/null 2>&1
    else
        echo -e "\033[1;36m[*]\033[0m Reinstall patch"
        xbps-install -fy $P01 $P02 $P03 $P04 $P05 $P90 $P91 $P92 $P93 $P94
    fi
    # check service
    for s in adb backlight bluetoothd bluez-alsa colord earlyoom ntpd zramen; do
        if sv status ${s} | grep run >/dev/null 2>&1; then
            echo >/dev/null 2>&1
        else
            ln -s -f /etc/sv/${s} /var/service/
        fi
    done
}

quit(){
    echo
    read -n 1 -s -r -p "$ANYKEY"
    exit 0
}

for arg in "$@"; do
    case $arg in
        --update|-u)
            check_root
            echo -e "\033[1;36m[1]\033[0m Synchronization"
            xbps-install -S;
            echo -e "\033[1;36m[2]\033[0m Full system upgrade"
            xbps-install -uI
            echo -e "\033[1;36m[3]\033[0m Check trouble and patch"
            check_version
            check_patch
            reinstall_patch
            check_screen_tearing_intel
            check_enable_os_prober
            check_enable_rtc_windows
            echo -e "\033[1;36m[4]\033[0m Remove all old kernels?"
            read -e -p "[*] Do you want to continue? [y/N]: " KERNEL
            if [[ $KERNEL =~ ^[Yy]$ ]]; then
                echo -e "[*] Yes, wait a minutes"
                vkpurge rm all
            fi
            echo -e "\033[1;36m[5]\033[0m Remove obsolete and orphans packages?"
            read -e -p "[*] Do you want to continue? [y/N]: " CACHE
            if [[ $CACHE =~ ^[Yy]$ ]]; then
                echo -e "[*] Yes, wait a minutes"
                xbps-remove -vOoy
            fi
            quit
        ;;
        --remote|-r)
            if find ~/.ssh/ -name "*.pub" -type f >/dev/null 2>&1; then
                echo -e >/dev/null 2>&1
            else
                ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519
            fi
            tmate
        ;;
        --chroot|-c)
            check_root
            echo; lsblk -o name,fstype,fsavail,fsused,fsuse%,size,mountpoint
            echo
            read -e -p "[*] Root partition (ex: sda2): " root_part
            mount /dev/$root_part /mnt/
            read -e -p "[*] Boot mode uefi (y/n): " boot_opt
            if [[ $boot_opt =~ ^[Yy]$ ]]; then
                # for separate efi partition (uefi)
                read -e -p "[*] Boot efi partition (ex: sda1): " boot_part
                boot_target="boot/efi"
                mkdir -p /mnt/$boot_target
                mount /dev/$boot_part /mnt/$boot_target
            else
                # for separate bios partition (legacy)
                read -e -p "[*] Separate boot bios partition (y/n): " boot_separate
                if [[ $boot_separate =~ ^[Yy]$ ]]; then
                    read -e -p "[*] Boot bios partition (ex: sda1): " boot_part
                    boot_target="boot"
                    mkdir -p /mnt/$boot_target
                    mount /dev/$boot_part /mnt/$boot_target
                else
                    # for merged root & bios partition (legacy)
                    echo >/dev/null 2>&1
                fi
            fi
            # mount sys, dev, proc, run
            for dir in dev proc sys run;
            do mkdir -p /mnt/$dir ;
                mount --rbind /$dir /mnt/$dir ;
                mount --make-rslave /mnt/$dir ;
            done
            # enable network
            cp /etc/resolv.conf /mnt/etc/
            # chroot mode
            echo
            chroot /mnt/ /bin/fish
            umount -R /mnt >/dev/null 2>&1
            echo -e "[*] Chroot exit"
        ;;
        --grub|-g)
            check_root
            echo; lsblk -o name,fstype,fsavail,fsused,fsuse%,size,mountpoint
            echo
            read -e -p "[*] Boot mode UEFI (y/n): " boot_opt
            if [[ $boot_opt =~ ^[Yy]$ ]]; then
                read -e -p "[*] Continue install grub (Y/n): " continue
                if [[ $continue =~ ^[Yy]$ ]]; then
                    echo
                    grub-install --target=x86_64-efi \
                    --efi-directory=/boot/efi --bootloader-id="LangitKetujuh"
                    check_enable_os_prober
                else
                    exit
                fi
            else
                read -e -p "[*] Bootloader (ex: sda): " boot_loader
                read -e -p "[*] Continue install grub (Y/n): " continue
                if [[ $continue =~ ^[Yy]$ ]]; then
                    echo
                    grub-install /dev/$boot_loader
                    check_enable_os_prober
                else
                    exit
                fi
            fi
        ;;
        --user|-m)
            check_root
            read -e -p "[*] User name: " user_name
            read -e -p "[*] Full name: " full_name
            read -e -p "[*] As Administrator (Y/n): " admin_user
            if [[ $admin_user =~ ^[Yy]$ ]]; then
                user_group="$user_name,wheel"
            else
                user_group="$user_name"
            fi
            echo -e "[*] Create user: \033[1;36m$user_name ($full_name)\033[0m"
            read -e -p "[*] Continue create user (Y/n): " continue
            if [[ $continue =~ ^[Yy]$ ]]; then
                useradd $user_name -c "$full_name"
                echo -e "[*] Create new user password"
                passwd $user_name
                usermod -a $user_name -G $user_group,_pipewire,audio,bluetooth,colord,video,cdrom,floppy,kvm,optical,xbuilder
                echo -e "[*] User $user_name created successfully"
            else
                exit
            fi
        ;;
        --patch|-p)
            check_root
            check_version
            check_patch
            reinstall_patch
            check_screen_tearing_intel
            check_enable_os_prober
            check_enable_rtc_windows
        ;;
        --downgrade|-d)
            check_root
            echo -e "\033[1;36m[1] Display Callibrator\033[0m"
            xbps-remove -R dispcalGUI
            echo -e "\033[1;36m[2] Add-ons 2D Software\033[0m"
            xbps-remove -R gmic gmic-gimp gimp-lqr-plugin xsane-gimp resynthesizer l7-krita
            echo -e "\033[1;36m[3] Photography Software\033[0m"
            xbps-remove -R digikam rawtherapee hugin Converseen
            echo -e "\033[1;36m[4] Non-linear Editor\033[0m"
            xbps-remove -R kdenlive handbrake mkvtoolnix-gui
            echo -e "\033[1;36m[5] Font Maker\033[0m"
            xbps-remove -R fontforge
            echo -e "\033[1;36m[6] Digital Painting\033[0m"
            xbps-remove -R krita l7-krita gmic-krita
            echo -e "\033[1;36m[7] Recorder & Broadcaster Software\033[0m"
            xbps-remove -R obs l7-obs
            echo -e "\033[1;36m[8] Layout & Desktop Publishing\033[0m"
            xbps-remove -R scribus l7-scribus
            echo -e "\033[1;36m[9] 2D/3D Animation Full Feature\033[0m"
            xbps-remove -R blender l7-blender synfigstudio opentoonz
            echo -e "\033[1;36m[10] Audio Production\033[0m"
            xbps-remove -R audacity l7-audacity ardour l7-ardour kid3 \
            soundkonverter lmms freepats cmt alsa-plugins-jack zita-ajbridge \
            zita-alsa-pcmi zita-at1 zita-njbridge zita-resampler \
            alsa-plugins-samplerate calf fftw rubberband librubberband \
            ladspa-bs2b speex mda-lv2 soundfont-fluid
            echo -e "\033[1;36m[11] Extra Google Fonts\033[0m"
            xbps-remove -R google-fonts-ttf
            echo -e "\033[1;36m[12] Game Engine Creator Mutiplatform\033[0m"
            xbps-remove -R godot l7-godot
            echo -e "\033[1;36m[13] CAD Sofware\033[0m"
            xbps-remove -R freecad LibreCAD
            echo -e "\033[1;36m[14] Program Compiler\033[0m"
            xbps-remove -R automake bison fakeroot flex gdb libtool m4 patch \
            pkg-config qemu-user-static scons yasm gcc-objc++ llvm clang icu cmake
        ;;
        --help|-h)
            usage
            exit 0
        ;;
        --version|-v)
            echo -e "\033[1;33m $NAME\033[0m version $VERSION"
            exit 0
        ;;
        *)
            echo -e "Please run : \033[1;33mdoas l7-tools --update\033[0m"
            exit 0
    esac
done
